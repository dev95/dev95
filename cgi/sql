#!/usr/bin/perl -w

use strict;
use utf8;
use DBI;
use Config::Simple;
use encoding 'utf8';

my %cfg;
Config::Simple->import_from( "/etc/dev95/jwc2ical.conf", \%cfg);

my $user = $cfg{"DB_USER"} or die "No DATABASE User found!";
my $password = $cfg{"DB_PASSWD"} or die "No DATABASE Password found!";

my $dbh = DBI->connect("DBI:mysql:jwc2ical", $user, $password)
	or die "Couldn't connect to data base: ", DBI->errstr;
$dbh->do("set names 'utf8';");
$dbh->{'mysql_enable_utf8'} = 1;

my @class_parts = qw/ name teacher location week repeats interval date s_time t_time/;
my @exam_parts = qw/ week date s_time t_time location name/;
my @sql_parts = qw/ version class name teacher location week date s_time t_time repeats interval type/;

my $type = shift;
my $version = shift;
if ( $type eq 't')
{
	my @lines = <STDIN>;
	&text_to_sql( $version, \@lines);
}
elsif ( $type eq 's')
{
	my $class = shift;
	&sql_to_text( $version, $class);
}
elsif ( $type eq 'f')
{
	&fetch_version_date();
}
elsif ( $type eq 'u')
{
	&update_version_date( $version);
}
elsif ( $type eq 'p')
{
	my $class = shift;
	my $value = shift;
	&put_class_value( $version, $class, $value);
}
elsif ( $type eq 'g')
{
	my $class = shift;
	&get_class_value( $version, $class);
}
elsif ( $type eq 'c')
{
	my $class = shift;
	&courses( $version, $class);
}

sub courses
{
	my $version = shift;
	my $class = shift;

	my $csth = $dbh->prepare( "SELECT `name` FROM course WHERE `version` = '$version' and `class` = '$class'")
		or die $dbh->errstr;
	$csth->execute() or die;
	my @courses;
	while ( my @row = $csth->fetchrow_array)
	{
		push @courses, $row[0];
	}

	print @courses."\n";
	@courses = sort @courses;
	foreach ( @courses)
	{
		print $_, "\n";
	}
}

sub get_class_value
{
	my $version = shift;
	my $class = shift;

	my $sth = $dbh->prepare( "SELECT `value` FROM class WHERE `version` = '$version' and `class` = '$class'")
		or die $dbh->errstr;
	$sth->execute() or die;
	my @value = $sth->fetchrow_array();
	print @value ? $value[0] : "NULL" , "\n";
}

sub put_class_value
{
	my $version = shift;
	my $class = shift;
	my $value = shift;

	print "$version $class $value\n";
	my $sth = $dbh->prepare( "INSERT INTO class ( `version`, `class`, `value`) VALUE ( '$version', '$class', '$value')")
		or die $dbh->errstr;
	$sth->execute() or die;
}

sub fetch_version_date
{
	my $sth = $dbh->prepare( "SELECT `value` FROM config WHERE `key` = 'version'")
		or die $dbh->errstr;
	$sth->execute() or die $dbh->errstr;
	my $version = ( $sth->fetchrow_array())[0];
	print $version, "\n";
}

sub update_version_date
{
	my $version = shift;
	my $sth = $dbh->prepare( "UPDATE config SET `value` = '$version' WHERE `key` = 'version'")
		or die $dbh->errstr;
	$sth->execute() or die $dbh->errstr;
}

sub sql_to_text
{
	my $version = shift;
	my $class = shift;
	
	my $courses;
	my @courses;
	my $csth = $dbh->prepare( "SELECT * FROM course WHERE `version` = '$version' and `class` = '$class'")
		or die $dbh->errstr;
	$csth->execute() or die $dbh->errstr;
	while ( my @row = $csth->fetchrow_array)
	{
		push @courses, $row[3];
		$courses .= '`' . $row[3];
	}
	$courses or ( print "Get no result\n" and exit);

	my $sth = $dbh->prepare( "SELECT * FROM event WHERE `version` = '$version' and `class` = '$class'")
		or die $dbh->errstr;
	$sth->execute() or die;

	my @classes;
	my @exams;
	while ( my @row = $sth->fetchrow_array)
	{
		my $id = shift @row;

		my %event;
		foreach my $part ( @sql_parts)
		{
			$event{$part} = shift @row;
		}

		delete $event{id};
		delete $event{version};
		delete $event{class};
		$event{s_time} = &time_to_array( $event{s_time});
		$event{t_time} = &time_to_array( $event{t_time});

		$type = delete $event{type};
		if ( $type eq "class")
		{
			push @classes, { %event};
		}
		elsif ( $type eq "exam")
		{
			push @exams, { %event};
		}
		else
		{
			warn "wrong type at $id, $class, $version";
		}
	}

	print $class, $courses, "\n";
	foreach ( @classes)
	{
		my %class = %$_;
		print "Class";
		foreach ( @class_parts)
		{
			print "`", $_ =~ m/time/ ? $class{$_}[0].":".$class{$_}[1] : $class{$_};
		}
		print "\n";
	}

	foreach ( @exams)
	{
		my %exam = %$_;
		print "Exam";
		foreach ( @exam_parts)
		{
			print "`", $_ =~ m/time/ ? $exam{$_}[0].":".$exam{$_}[1] : $exam{$_};
		}
		print "\n";
	}
}

sub text_to_sql
{
	my $version = shift;

	my $lines = shift;

	my $courses = shift @$lines;
	$courses or print "No header line\n" and exit;
	chomp( $courses);
	my @courses = split /`/, $courses;
	my $class = shift @courses;

	my $csth = $dbh->prepare( "INSERT INTO course ( `version`, `class`, `name`, `count`, `type`) VALUES ( ?, ?, ?, ?, ?);")
		or die $dbh->errstr;

	foreach my $course ( @courses)
	{
		$csth->bind_param( 1, $version);
		$csth->bind_param( 2, $class);
		$csth->bind_param( 3, $course);
		$csth->bind_param( 4, 1);
		$csth->bind_param( 5, 'class');
		$csth->execute() or die $dbh->errstr;
	}

	my @classes;
	my @exams;
	foreach my $line ( @$lines)
	{
		chomp $line;
		my @info = split /`/, $line;
		if ( shift @info eq 'Class')
		{
			&parse_and_push( \@info, \@class_parts, \@classes);
			$classes[-1]{type} = 'class';
		}
		else
		{
			&parse_and_push( \@info, \@exam_parts, \@exams);
			$exams[-1]{type} = 'exam';
		}
	}

	my $cnt = @sql_parts;
	my $col = "@sql_parts";
	$col =~ s/ /`, `/g;
	my $sth = $dbh->prepare( "INSERT INTO event ( `$col`) VALUES (". " ?," x ( $cnt - 1) ." ?);")
		or die $dbh->errstr;

	foreach my $event ( @classes, @exams)
	{
		my %event = %$event;
		$event{version} = $version;
		$event{class} = $class;
		$event{s_time} = &array_to_time( $event{s_time});
		$event{t_time} = &array_to_time( $event{t_time});

		my $cur = 1;
		foreach my $part ( @sql_parts)
		{
			$sth->bind_param( $cur, $event{$part});
			$cur++;
		}

		$sth->execute() or die $dbh->errstr;
	}
}

sub array_to_time
{
	my $array = shift;
	return $$array[0] * 100 + $$array[1];
}

sub time_to_array
{
	my $time = shift;
	return [ int( $time / 100), $time % 100 < 10 ? '0'. ( $time % 100) : $time % 100];
}

sub parse_and_push
{
	my ( $info, $parts, $set) = @_;
	my %event_info;
	foreach ( 0..@$parts-1)
	{
		if ( $$parts[$_] =~ m/time/)
		{
			$event_info{$$parts[$_]} = [ split /:/, $$info[$_]];
		}
		else
		{
			$event_info{$$parts[$_]} = $$info[$_];
		}
	}

	push @{$set}, { %event_info};
}
